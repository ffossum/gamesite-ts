// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`login form container is a renderable React component 1`] = `
ReactWrapper {
  "length": 1,
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(Symbol.observable): [Function],
      }
    }
  >
    <Connect(LoginForm) />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": Provider {
      "__reactInternalMemoizedMergedChildContext": Object {
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        },
        "storeSubscription": null,
      },
      "_reactInternalFiber": FiberNode {
        "_debugID": 5,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Email,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Password",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Password",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 17,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="password"
                            name="password"
                            type="password"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Password,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <button
                        type="submit"
                      >
                        Log in
                      </button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": LoginForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {},
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 0,
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "index": 0,
          "key": null,
          "lastEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Email,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Password",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Password",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 17,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="password"
                            name="password"
                            type="password"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Password,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <button
                        type="submit"
                      >
                        Log in
                      </button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": LoginForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {},
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 0,
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(LoginForm) />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <Connect(LoginForm) />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(LoginForm) />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        }
                      }
                    />,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        }
                      }
                    />,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 7,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 8,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 9,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 12,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 13,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Email",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Email",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 14,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="email"
                            name="email"
                            type="email"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Email,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 10,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 15,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 16,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Password",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Password",
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 17,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <input
                              id="password"
                              name="password"
                              type="password"
                            />,
                            "tag": 5,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": Password,
                          "tag": 6,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>,
                        "tag": 5,
                        "type": "label",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 11,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <button
                          type="submit"
                        >
                          Log in
                        </button>,
                        "tag": 5,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>,
                  "tag": 5,
                  "type": "form",
                  "updateQueue": null,
                },
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": LoginForm {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handleChange": [Function],
                  "handleSubmit": [Function],
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "notifyNestedSubs": [Function],
                "props": Object {},
                "propsMode": false,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 0,
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>
              </div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    }
                  }
                />,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 8,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 9,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 12,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 13,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Email",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Email",
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 14,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <input
                        id="email"
                        name="email"
                        type="email"
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": Email,
                    "tag": 6,
                    "type": null,
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>,
                  "tag": 5,
                  "type": "label",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 10,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 15,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 16,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Password",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Password",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 17,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="password"
                          name="password"
                          type="password"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Password,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 11,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <button
                      type="submit"
                    >
                      Log in
                    </button>,
                    "tag": 5,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>,
                "tag": 5,
                "type": "div",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <form>
                <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>
                <div>
                  <label
                    for="password"
                  >
                    Password
                    <input
                      id="password"
                      name="password"
                      type="password"
                    />
                  </label>
                </div>
                <button
                  type="submit"
                >
                  Log in
                </button>
              </form>,
              "tag": 5,
              "type": "form",
              "updateQueue": null,
            },
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": LoginForm {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "handleChange": [Function],
              "handleSubmit": [Function],
              "props": Object {
                "loading": false,
                "logIn": [Function],
              },
              "refs": Object {},
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "effectTag": 5,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {},
          "memoizedState": Object {},
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {},
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": Connect {
            "__reactInternalMemoizedMaskedChildContext": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": null,
            },
            "__reactInternalMemoizedMergedChildContext": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "__reactInternalMemoizedUnmaskedChildContext": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": null,
            },
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": null,
            },
            "notifyNestedSubs": [Function],
            "props": Object {},
            "propsMode": false,
            "refs": Object {},
            "renderCount": 0,
            "selector": Object {
              "error": null,
              "props": Object {
                "loading": false,
                "logIn": [Function],
              },
              "run": [Function],
              "shouldComponentUpdate": false,
            },
            "setWrappedInstance": [Function],
            "state": Object {},
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
            "subscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": null,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "unsubscribe": [Function],
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
            "version": 0,
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "effectTag": 1,
        "expirationTime": 0,
        "firstEffect": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 8,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 9,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 12,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 13,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Email",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Email",
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 14,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <input
                        id="email"
                        name="email"
                        type="email"
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": Email,
                    "tag": 6,
                    "type": null,
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>,
                  "tag": 5,
                  "type": "label",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 10,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 15,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 16,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Password",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Password",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 17,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="password"
                          name="password"
                          type="password"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Password,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 11,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <button
                      type="submit"
                    >
                      Log in
                    </button>,
                    "tag": 5,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>,
                "tag": 5,
                "type": "div",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <form>
                <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>
                <div>
                  <label
                    for="password"
                  >
                    Password
                    <input
                      id="password"
                      name="password"
                      type="password"
                    />
                  </label>
                </div>
                <button
                  type="submit"
                >
                  Log in
                </button>
              </form>,
              "tag": 5,
              "type": "form",
              "updateQueue": null,
            },
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": LoginForm {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "handleChange": [Function],
              "handleSubmit": [Function],
              "props": Object {
                "loading": false,
                "logIn": [Function],
              },
              "refs": Object {},
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "effectTag": 5,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {},
          "memoizedState": Object {},
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {},
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": Connect {
            "__reactInternalMemoizedMaskedChildContext": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": null,
            },
            "__reactInternalMemoizedMergedChildContext": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "__reactInternalMemoizedUnmaskedChildContext": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": null,
            },
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": null,
            },
            "notifyNestedSubs": [Function],
            "props": Object {},
            "propsMode": false,
            "refs": Object {},
            "renderCount": 0,
            "selector": Object {
              "error": null,
              "props": Object {
                "loading": false,
                "logIn": [Function],
              },
              "run": [Function],
              "shouldComponentUpdate": false,
            },
            "setWrappedInstance": [Function],
            "state": Object {},
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
            "subscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": null,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "unsubscribe": [Function],
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
            "version": 0,
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "index": 0,
        "key": null,
        "lastEffect": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 8,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 9,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 12,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 13,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Email",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Email",
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 14,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <input
                        id="email"
                        name="email"
                        type="email"
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": Email,
                    "tag": 6,
                    "type": null,
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>,
                  "tag": 5,
                  "type": "label",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 10,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 15,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 16,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Password",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Password",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 17,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="password"
                          name="password"
                          type="password"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Password,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 11,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <button
                      type="submit"
                    >
                      Log in
                    </button>,
                    "tag": 5,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>,
                "tag": 5,
                "type": "div",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <form>
                <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>
                <div>
                  <label
                    for="password"
                  >
                    Password
                    <input
                      id="password"
                      name="password"
                      type="password"
                    />
                  </label>
                </div>
                <button
                  type="submit"
                >
                  Log in
                </button>
              </form>,
              "tag": 5,
              "type": "form",
              "updateQueue": null,
            },
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": LoginForm {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "handleChange": [Function],
              "handleSubmit": [Function],
              "props": Object {
                "loading": false,
                "logIn": [Function],
              },
              "refs": Object {},
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "effectTag": 5,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {},
          "memoizedState": Object {},
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {},
          "ref": null,
          "return": [Circular],
          "sibling": null,
          "stateNode": Connect {
            "__reactInternalMemoizedMaskedChildContext": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": null,
            },
            "__reactInternalMemoizedMergedChildContext": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "__reactInternalMemoizedUnmaskedChildContext": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": null,
            },
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "storeSubscription": null,
            },
            "notifyNestedSubs": [Function],
            "props": Object {},
            "propsMode": false,
            "refs": Object {},
            "renderCount": 0,
            "selector": Object {
              "error": null,
              "props": Object {
                "loading": false,
                "logIn": [Function],
              },
              "run": [Function],
              "shouldComponentUpdate": false,
            },
            "setWrappedInstance": [Function],
            "state": Object {},
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
            "subscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": null,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "unsubscribe": [Function],
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
            "version": 0,
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "memoizedProps": Object {
          "children": <Connect(LoginForm) />,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
        },
        "memoizedState": null,
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "children": <Connect(LoginForm) />,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Email,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Password",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Password",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 17,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="password"
                            name="password"
                            type="password"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Password,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <button
                        type="submit"
                      >
                        Log in
                      </button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": LoginForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {},
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 0,
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "index": 0,
          "key": null,
          "lastEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Email,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Password",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Password",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 17,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="password"
                            name="password"
                            type="password"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Password,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <button
                        type="submit"
                      >
                        Log in
                      </button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": LoginForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {},
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 0,
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(LoginForm) />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <Connect(LoginForm) />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(LoginForm) />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 1,
                "first": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        }
                      }
                    />,
                  },
                },
                "hasForceUpdate": false,
                "isInitialized": false,
                "isProcessing": false,
                "last": Object {
                  "callback": null,
                  "capturedValue": null,
                  "expirationTime": 1,
                  "isForced": false,
                  "isReplace": false,
                  "next": null,
                  "partialState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        }
                      }
                    />,
                  },
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 7,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 8,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 9,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 12,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 13,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Email",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Email",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 14,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="email"
                            name="email"
                            type="email"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Email,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 10,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 15,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 16,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Password",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Password",
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 17,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <input
                              id="password"
                              name="password"
                              type="password"
                            />,
                            "tag": 5,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": Password,
                          "tag": 6,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>,
                        "tag": 5,
                        "type": "label",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 11,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <button
                          type="submit"
                        >
                          Log in
                        </button>,
                        "tag": 5,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>,
                  "tag": 5,
                  "type": "form",
                  "updateQueue": null,
                },
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": LoginForm {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handleChange": [Function],
                  "handleSubmit": [Function],
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "notifyNestedSubs": [Function],
                "props": Object {},
                "propsMode": false,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 0,
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>
              </div>,
              "context": Object {},
              "current": [Circular],
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    }
                  }
                />,
              },
              "callbackList": null,
              "capturedValues": null,
              "expirationTime": 0,
              "first": null,
              "hasForceUpdate": false,
              "isInitialized": true,
              "isProcessing": false,
              "last": null,
            },
          },
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "props": Object {
        "children": <Connect(LoginForm) />,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        },
      },
      "refs": Object {},
      "state": null,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(Symbol.observable): [Function],
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Connect(LoginForm) />,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(Symbol.observable): [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": Connect {
        "__reactInternalMemoizedMaskedChildContext": Object {
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "storeSubscription": null,
        },
        "__reactInternalMemoizedMergedChildContext": Object {
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "storeSubscription": Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": null,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
            "unsubscribe": [Function],
          },
        },
        "__reactInternalMemoizedUnmaskedChildContext": Object {
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "storeSubscription": null,
        },
        "_reactInternalFiber": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 8,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 9,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 12,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 13,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Email",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Email",
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 14,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <input
                        id="email"
                        name="email"
                        type="email"
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": Email,
                    "tag": 6,
                    "type": null,
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>,
                  "tag": 5,
                  "type": "label",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 10,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 15,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 16,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Password",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Password",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 17,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="password"
                          name="password"
                          type="password"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Password,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 11,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <button
                      type="submit"
                    >
                      Log in
                    </button>,
                    "tag": 5,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>,
                "tag": 5,
                "type": "div",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <form>
                <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>
                <div>
                  <label
                    for="password"
                  >
                    Password
                    <input
                      id="password"
                      name="password"
                      type="password"
                    />
                  </label>
                </div>
                <button
                  type="submit"
                >
                  Log in
                </button>
              </form>,
              "tag": 5,
              "type": "form",
              "updateQueue": null,
            },
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": LoginForm {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "handleChange": [Function],
              "handleSubmit": [Function],
              "props": Object {
                "loading": false,
                "logIn": [Function],
              },
              "refs": Object {},
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "effectTag": 5,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {},
          "memoizedState": Object {},
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {},
          "ref": null,
          "return": FiberNode {
            "_debugID": 5,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugID": 1,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form>
                        <div>
                          <label
                            for="email"
                          >
                            Email
                            <input
                              id="email"
                              name="email"
                              type="email"
                            />
                          </label>
                        </div>
                        <div>
                          <label
                            for="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              type="password"
                            />
                          </label>
                        </div>
                        <button
                          type="submit"
                        >
                          Log in
                        </button>
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "remainingExpirationTime": 0,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "callbackList": null,
                    "capturedValues": null,
                    "expirationTime": 1,
                    "first": Object {
                      "callback": null,
                      "capturedValue": null,
                      "expirationTime": 1,
                      "isForced": false,
                      "isReplace": false,
                      "next": null,
                      "partialState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                    },
                    "hasForceUpdate": false,
                    "isInitialized": false,
                    "isProcessing": false,
                    "last": Object {
                      "callback": null,
                      "capturedValue": null,
                      "expirationTime": 1,
                      "isForced": false,
                      "isReplace": false,
                      "next": null,
                      "partialState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                    },
                  },
                },
                "child": [Circular],
                "effectTag": 32,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      }
                    }
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form>
                      <div>
                        <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>
                      </div>
                      <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>
                      <button
                        type="submit"
                      >
                        Log in
                      </button>
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        }
                      }
                    />,
                  },
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 0,
                  "first": null,
                  "hasForceUpdate": false,
                  "isInitialized": true,
                  "isProcessing": false,
                  "last": null,
                },
              },
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "children": <Connect(LoginForm) />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <Connect(LoginForm) />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugID": 1,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form>
                        <div>
                          <label
                            for="email"
                          >
                            Email
                            <input
                              id="email"
                              name="email"
                              type="email"
                            />
                          </label>
                        </div>
                        <div>
                          <label
                            for="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              type="password"
                            />
                          </label>
                        </div>
                        <button
                          type="submit"
                        >
                          Log in
                        </button>
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "remainingExpirationTime": 0,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "callbackList": null,
                    "capturedValues": null,
                    "expirationTime": 1,
                    "first": Object {
                      "callback": null,
                      "capturedValue": null,
                      "expirationTime": 1,
                      "isForced": false,
                      "isReplace": false,
                      "next": null,
                      "partialState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                    },
                    "hasForceUpdate": false,
                    "isInitialized": false,
                    "isProcessing": false,
                    "last": Object {
                      "callback": null,
                      "capturedValue": null,
                      "expirationTime": 1,
                      "isForced": false,
                      "isReplace": false,
                      "next": null,
                      "partialState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                    },
                  },
                },
                "child": [Circular],
                "effectTag": 32,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      }
                    }
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form>
                      <div>
                        <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>
                      </div>
                      <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>
                      <button
                        type="submit"
                      >
                        Log in
                      </button>
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        }
                      }
                    />,
                  },
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 0,
                  "first": null,
                  "hasForceUpdate": false,
                  "isInitialized": true,
                  "isProcessing": false,
                  "last": null,
                },
              },
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "sibling": null,
            "stateNode": Provider {
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
              "refs": Object {},
              "state": null,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "storeSubscription": null,
        },
        "notifyNestedSubs": [Function],
        "props": Object {},
        "propsMode": false,
        "refs": Object {},
        "renderCount": 0,
        "selector": Object {
          "error": null,
          "props": Object {
            "loading": false,
            "logIn": [Function],
          },
          "run": [Function],
          "shouldComponentUpdate": false,
        },
        "setWrappedInstance": [Function],
        "state": Object {},
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        },
        "subscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": null,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "unsubscribe": [Function],
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
        "version": 0,
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": Object {
        "instance": LoginForm {
          "_reactInternalFiber": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": FiberNode {
                "_debugID": 5,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 4,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": null,
                  "child": [Circular],
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 1,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": FiberNode {
                      "_debugID": 1,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": [Circular],
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form>
                            <div>
                              <label
                                for="email"
                              >
                                Email
                                <input
                                  id="email"
                                  name="email"
                                  type="email"
                                />
                              </label>
                            </div>
                            <div>
                              <label
                                for="password"
                              >
                                Password
                                <input
                                  id="password"
                                  name="password"
                                  type="password"
                                />
                              </label>
                            </div>
                            <button
                              type="submit"
                            >
                              Log in
                            </button>
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "remainingExpirationTime": 0,
                      },
                      "tag": 3,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "callbackList": null,
                        "capturedValues": null,
                        "expirationTime": 1,
                        "first": Object {
                          "callback": null,
                          "capturedValue": null,
                          "expirationTime": 1,
                          "isForced": false,
                          "isReplace": false,
                          "next": null,
                          "partialState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(LoginForm) />,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(Symbol.observable): [Function],
                                  },
                                }
                              }
                            />,
                          },
                        },
                        "hasForceUpdate": false,
                        "isInitialized": false,
                        "isProcessing": false,
                        "last": Object {
                          "callback": null,
                          "capturedValue": null,
                          "expirationTime": 1,
                          "isForced": false,
                          "isReplace": false,
                          "next": null,
                          "partialState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(LoginForm) />,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(Symbol.observable): [Function],
                                  },
                                }
                              }
                            />,
                          },
                        },
                      },
                    },
                    "child": [Circular],
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form>
                          <div>
                            <label
                              for="email"
                            >
                              Email
                              <input
                                id="email"
                                name="email"
                                type="email"
                              />
                            </label>
                          </div>
                          <div>
                            <label
                              for="password"
                            >
                              Password
                              <input
                                id="password"
                                name="password"
                                type="password"
                              />
                            </label>
                          </div>
                          <button
                            type="submit"
                          >
                            Log in
                          </button>
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "remainingExpirationTime": 0,
                    },
                    "tag": 3,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                      "callbackList": null,
                      "capturedValues": null,
                      "expirationTime": 0,
                      "first": null,
                      "hasForceUpdate": false,
                      "isInitialized": true,
                      "isProcessing": false,
                      "last": null,
                    },
                  },
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "alternate": null,
                "child": [Circular],
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 4,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": null,
                  "child": [Circular],
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 1,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": FiberNode {
                      "_debugID": 1,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": [Circular],
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form>
                            <div>
                              <label
                                for="email"
                              >
                                Email
                                <input
                                  id="email"
                                  name="email"
                                  type="email"
                                />
                              </label>
                            </div>
                            <div>
                              <label
                                for="password"
                              >
                                Password
                                <input
                                  id="password"
                                  name="password"
                                  type="password"
                                />
                              </label>
                            </div>
                            <button
                              type="submit"
                            >
                              Log in
                            </button>
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "remainingExpirationTime": 0,
                      },
                      "tag": 3,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "callbackList": null,
                        "capturedValues": null,
                        "expirationTime": 1,
                        "first": Object {
                          "callback": null,
                          "capturedValue": null,
                          "expirationTime": 1,
                          "isForced": false,
                          "isReplace": false,
                          "next": null,
                          "partialState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(LoginForm) />,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(Symbol.observable): [Function],
                                  },
                                }
                              }
                            />,
                          },
                        },
                        "hasForceUpdate": false,
                        "isInitialized": false,
                        "isProcessing": false,
                        "last": Object {
                          "callback": null,
                          "capturedValue": null,
                          "expirationTime": 1,
                          "isForced": false,
                          "isReplace": false,
                          "next": null,
                          "partialState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(LoginForm) />,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(Symbol.observable): [Function],
                                  },
                                }
                              }
                            />,
                          },
                        },
                      },
                    },
                    "child": [Circular],
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form>
                          <div>
                            <label
                              for="email"
                            >
                              Email
                              <input
                                id="email"
                                name="email"
                                type="email"
                              />
                            </label>
                          </div>
                          <div>
                            <label
                              for="password"
                            >
                              Password
                              <input
                                id="password"
                                name="password"
                                type="password"
                              />
                            </label>
                          </div>
                          <button
                            type="submit"
                          >
                            Log in
                          </button>
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "remainingExpirationTime": 0,
                    },
                    "tag": 3,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                      "callbackList": null,
                      "capturedValues": null,
                      "expirationTime": 0,
                      "first": null,
                      "hasForceUpdate": false,
                      "isInitialized": true,
                      "isProcessing": false,
                      "last": null,
                    },
                  },
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "type": [Function],
                  "updateQueue": null,
                },
                "sibling": null,
                "stateNode": Provider {
                  "__reactInternalMemoizedMergedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                  "refs": Object {},
                  "state": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "notifyNestedSubs": [Function],
                "props": Object {},
                "propsMode": false,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 0,
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 8,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 9,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 12,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 13,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Email",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Email",
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 14,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <input
                        id="email"
                        name="email"
                        type="email"
                      />,
                      "tag": 5,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": Email,
                    "tag": 6,
                    "type": null,
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>,
                  "tag": 5,
                  "type": "label",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "ref": null,
                "return": [Circular],
                "sibling": FiberNode {
                  "_debugID": 10,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 15,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 16,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Password",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Password",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 17,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="password"
                          name="password"
                          type="password"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Password,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 11,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Log in",
                      "disabled": false,
                      "type": "submit",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <button
                      type="submit"
                    >
                      Log in
                    </button>,
                    "tag": 5,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>,
                "tag": 5,
                "type": "div",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div>
                    <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>
                  </div>,
                  <div>
                    <label
                      htmlFor="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />
                    </label>
                  </div>,
                  <button
                    disabled={false}
                    type="submit"
                  >
                    Log in
                  </button>,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": <form>
                <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>
                <div>
                  <label
                    for="password"
                  >
                    Password
                    <input
                      id="password"
                      name="password"
                      type="password"
                    />
                  </label>
                </div>
                <button
                  type="submit"
                >
                  Log in
                </button>
              </form>,
              "tag": 5,
              "type": "form",
              "updateQueue": null,
            },
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "loading": false,
              "logIn": [Function],
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": FiberNode {
                "_debugID": 5,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 4,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": null,
                  "child": [Circular],
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 1,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": FiberNode {
                      "_debugID": 1,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": [Circular],
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form>
                            <div>
                              <label
                                for="email"
                              >
                                Email
                                <input
                                  id="email"
                                  name="email"
                                  type="email"
                                />
                              </label>
                            </div>
                            <div>
                              <label
                                for="password"
                              >
                                Password
                                <input
                                  id="password"
                                  name="password"
                                  type="password"
                                />
                              </label>
                            </div>
                            <button
                              type="submit"
                            >
                              Log in
                            </button>
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "remainingExpirationTime": 0,
                      },
                      "tag": 3,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "callbackList": null,
                        "capturedValues": null,
                        "expirationTime": 1,
                        "first": Object {
                          "callback": null,
                          "capturedValue": null,
                          "expirationTime": 1,
                          "isForced": false,
                          "isReplace": false,
                          "next": null,
                          "partialState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(LoginForm) />,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(Symbol.observable): [Function],
                                  },
                                }
                              }
                            />,
                          },
                        },
                        "hasForceUpdate": false,
                        "isInitialized": false,
                        "isProcessing": false,
                        "last": Object {
                          "callback": null,
                          "capturedValue": null,
                          "expirationTime": 1,
                          "isForced": false,
                          "isReplace": false,
                          "next": null,
                          "partialState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(LoginForm) />,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(Symbol.observable): [Function],
                                  },
                                }
                              }
                            />,
                          },
                        },
                      },
                    },
                    "child": [Circular],
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form>
                          <div>
                            <label
                              for="email"
                            >
                              Email
                              <input
                                id="email"
                                name="email"
                                type="email"
                              />
                            </label>
                          </div>
                          <div>
                            <label
                              for="password"
                            >
                              Password
                              <input
                                id="password"
                                name="password"
                                type="password"
                              />
                            </label>
                          </div>
                          <button
                            type="submit"
                          >
                            Log in
                          </button>
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "remainingExpirationTime": 0,
                    },
                    "tag": 3,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                      "callbackList": null,
                      "capturedValues": null,
                      "expirationTime": 0,
                      "first": null,
                      "hasForceUpdate": false,
                      "isInitialized": true,
                      "isProcessing": false,
                      "last": null,
                    },
                  },
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "alternate": null,
                "child": [Circular],
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 4,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": null,
                  "child": [Circular],
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 1,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": FiberNode {
                      "_debugID": 1,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": [Circular],
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 1,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form>
                            <div>
                              <label
                                for="email"
                              >
                                Email
                                <input
                                  id="email"
                                  name="email"
                                  type="email"
                                />
                              </label>
                            </div>
                            <div>
                              <label
                                for="password"
                              >
                                Password
                                <input
                                  id="password"
                                  name="password"
                                  type="password"
                                />
                              </label>
                            </div>
                            <button
                              type="submit"
                            >
                              Log in
                            </button>
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "remainingExpirationTime": 0,
                      },
                      "tag": 3,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "callbackList": null,
                        "capturedValues": null,
                        "expirationTime": 1,
                        "first": Object {
                          "callback": null,
                          "capturedValue": null,
                          "expirationTime": 1,
                          "isForced": false,
                          "isReplace": false,
                          "next": null,
                          "partialState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(LoginForm) />,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(Symbol.observable): [Function],
                                  },
                                }
                              }
                            />,
                          },
                        },
                        "hasForceUpdate": false,
                        "isInitialized": false,
                        "isProcessing": false,
                        "last": Object {
                          "callback": null,
                          "capturedValue": null,
                          "expirationTime": 1,
                          "isForced": false,
                          "isReplace": false,
                          "next": null,
                          "partialState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(LoginForm) />,
                                  "store": Object {
                                    "dispatch": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                    Symbol(Symbol.observable): [Function],
                                  },
                                }
                              }
                            />,
                          },
                        },
                      },
                    },
                    "child": [Circular],
                    "effectTag": 32,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form>
                          <div>
                            <label
                              for="email"
                            >
                              Email
                              <input
                                id="email"
                                name="email"
                                type="email"
                              />
                            </label>
                          </div>
                          <div>
                            <label
                              for="password"
                            >
                              Password
                              <input
                                id="password"
                                name="password"
                                type="password"
                              />
                            </label>
                          </div>
                          <button
                            type="submit"
                          >
                            Log in
                          </button>
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "remainingExpirationTime": 0,
                    },
                    "tag": 3,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                      "callbackList": null,
                      "capturedValues": null,
                      "expirationTime": 0,
                      "first": null,
                      "hasForceUpdate": false,
                      "isInitialized": true,
                      "isProcessing": false,
                      "last": null,
                    },
                  },
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "type": [Function],
                  "updateQueue": null,
                },
                "sibling": null,
                "stateNode": Provider {
                  "__reactInternalMemoizedMergedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                  "refs": Object {},
                  "state": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "notifyNestedSubs": [Function],
                "props": Object {},
                "propsMode": false,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 0,
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "sibling": null,
            "stateNode": [Circular],
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "context": Object {},
          "handleChange": [Function],
          "handleSubmit": [Function],
          "props": Object {
            "loading": false,
            "logIn": [Function],
          },
          "refs": Object {},
          "state": null,
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "loading": false,
          "logIn": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": <form>
            <div>
              <label
                for="email"
              >
                Email
                <input
                  id="email"
                  name="email"
                  type="email"
                />
              </label>
            </div>
            <div>
              <label
                for="password"
              >
                Password
                <input
                  id="password"
                  name="password"
                  type="password"
                />
              </label>
            </div>
            <button
              type="submit"
            >
              Log in
            </button>
          </form>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <label
                  htmlFor="email"
                >
                  Email
                  <input
                    id="email"
                    name="email"
                    onChange={[Function]}
                    readOnly={false}
                    type="email"
                  />
                </label>
              </div>,
              <div>
                <label
                  htmlFor="password"
                >
                  Password
                  <input
                    id="password"
                    name="password"
                    onChange={[Function]}
                    readOnly={false}
                    type="password"
                  />
                </label>
              </div>,
              <button
                disabled={false}
                type="submit"
              >
                Log in
              </button>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div>
                <label
                  for="email"
                >
                  Email
                  <input
                    id="email"
                    name="email"
                    type="email"
                  />
                </label>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <label
                  htmlFor="email"
                >
                  Email
                  <input
                    id="email"
                    name="email"
                    onChange={[Function]}
                    readOnly={false}
                    type="email"
                  />
                </label>,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Email",
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />,
                    ],
                    "htmlFor": "email",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Email",
                    Object {
                      "instance": <input
                        id="email"
                        name="email"
                        type="email"
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "email",
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <div>
                <label
                  for="password"
                >
                  Password
                  <input
                    id="password"
                    name="password"
                    type="password"
                  />
                </label>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <label
                  htmlFor="password"
                >
                  Password
                  <input
                    id="password"
                    name="password"
                    onChange={[Function]}
                    readOnly={false}
                    type="password"
                  />
                </label>,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <label
                    for="password"
                  >
                    Password
                    <input
                      id="password"
                      name="password"
                      type="password"
                    />
                  </label>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Password",
                      <input
                        id="password"
                        name="password"
                        onChange={[Function]}
                        readOnly={false}
                        type="password"
                      />,
                    ],
                    "htmlFor": "password",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Password",
                    Object {
                      "instance": <input
                        id="password"
                        name="password"
                        type="password"
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "id": "password",
                        "name": "password",
                        "onChange": [Function],
                        "readOnly": false,
                        "type": "password",
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <button
                type="submit"
              >
                Log in
              </button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Log in",
                "disabled": false,
                "type": "submit",
              },
              "ref": null,
              "rendered": Array [
                "Log in",
              ],
              "type": "button",
            },
          ],
          "type": "form",
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": Provider {
        "__reactInternalMemoizedMergedChildContext": Object {
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "storeSubscription": null,
        },
        "_reactInternalFiber": FiberNode {
          "_debugID": 5,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 7,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 8,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 9,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 12,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 13,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Email",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Email",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 14,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="email"
                            name="email"
                            type="email"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Email,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 10,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 15,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 16,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Password",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Password",
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 17,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <input
                              id="password"
                              name="password"
                              type="password"
                            />,
                            "tag": 5,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": Password,
                          "tag": 6,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>,
                        "tag": 5,
                        "type": "label",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 11,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <button
                          type="submit"
                        >
                          Log in
                        </button>,
                        "tag": 5,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>,
                  "tag": 5,
                  "type": "form",
                  "updateQueue": null,
                },
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": LoginForm {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handleChange": [Function],
                  "handleSubmit": [Function],
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "notifyNestedSubs": [Function],
                "props": Object {},
                "propsMode": false,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 0,
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 7,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 8,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 9,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 12,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 13,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Email",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Email",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 14,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="email"
                            name="email"
                            type="email"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Email,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 10,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 15,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 16,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Password",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Password",
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 17,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <input
                              id="password"
                              name="password"
                              type="password"
                            />,
                            "tag": 5,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": Password,
                          "tag": 6,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>,
                        "tag": 5,
                        "type": "label",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 11,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <button
                          type="submit"
                        >
                          Log in
                        </button>,
                        "tag": 5,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>,
                  "tag": 5,
                  "type": "form",
                  "updateQueue": null,
                },
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": LoginForm {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handleChange": [Function],
                  "handleSubmit": [Function],
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "notifyNestedSubs": [Function],
                "props": Object {},
                "propsMode": false,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 0,
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form>
                      <div>
                        <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>
                      </div>
                      <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>
                      <button
                        type="submit"
                      >
                        Log in
                      </button>
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": FiberNode {
                "_debugID": 6,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 7,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 8,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 9,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 12,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 13,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Email",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Email",
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 14,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "id": "email",
                              "name": "email",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "email",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "id": "email",
                              "name": "email",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "email",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <input
                              id="email"
                              name="email"
                              type="email"
                            />,
                            "tag": 5,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": Email,
                          "tag": 6,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Email",
                            <input
                              id="email"
                              name="email"
                              onChange={[Function]}
                              readOnly={false}
                              type="email"
                            />,
                          ],
                          "htmlFor": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Email",
                            <input
                              id="email"
                              name="email"
                              onChange={[Function]}
                              readOnly={false}
                              type="email"
                            />,
                          ],
                          "htmlFor": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>,
                        "tag": 5,
                        "type": "label",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 10,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 15,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 16,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "Password",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "Password",
                            "ref": null,
                            "return": [Circular],
                            "sibling": FiberNode {
                              "_debugID": 17,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "alternate": null,
                              "child": null,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "id": "password",
                                "name": "password",
                                "onChange": [Function],
                                "readOnly": false,
                                "type": "password",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "id": "password",
                                "name": "password",
                                "onChange": [Function],
                                "readOnly": false,
                                "type": "password",
                              },
                              "ref": null,
                              "return": [Circular],
                              "sibling": null,
                              "stateNode": <input
                                id="password"
                                name="password"
                                type="password"
                              />,
                              "tag": 5,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "stateNode": Password,
                            "tag": 6,
                            "type": null,
                            "updateQueue": null,
                          },
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              "Password",
                              <input
                                id="password"
                                name="password"
                                onChange={[Function]}
                                readOnly={false}
                                type="password"
                              />,
                            ],
                            "htmlFor": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              "Password",
                              <input
                                id="password"
                                name="password"
                                onChange={[Function]}
                                readOnly={false}
                                type="password"
                              />,
                            ],
                            "htmlFor": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <label
                            for="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              type="password"
                            />
                          </label>,
                          "tag": 5,
                          "type": "label",
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": <label
                            htmlFor="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />
                          </label>,
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": <label
                            htmlFor="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />
                          </label>,
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 11,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Log in",
                            "disabled": false,
                            "type": "submit",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Log in",
                            "disabled": false,
                            "type": "submit",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <button
                            type="submit"
                          >
                            Log in
                          </button>,
                          "tag": 5,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "stateNode": <div>
                          <label
                            for="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              type="password"
                            />
                          </label>
                        </div>,
                        "tag": 5,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div>
                        <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div>
                          <label
                            htmlFor="email"
                          >
                            Email
                            <input
                              id="email"
                              name="email"
                              onChange={[Function]}
                              readOnly={false}
                              type="email"
                            />
                          </label>
                        </div>,
                        <div>
                          <label
                            htmlFor="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />
                          </label>
                        </div>,
                        <button
                          disabled={false}
                          type="submit"
                        >
                          Log in
                        </button>,
                      ],
                      "onSubmit": [Function],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div>
                          <label
                            htmlFor="email"
                          >
                            Email
                            <input
                              id="email"
                              name="email"
                              onChange={[Function]}
                              readOnly={false}
                              type="email"
                            />
                          </label>
                        </div>,
                        <div>
                          <label
                            htmlFor="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />
                          </label>
                        </div>,
                        <button
                          disabled={false}
                          type="submit"
                        >
                          Log in
                        </button>,
                      ],
                      "onSubmit": [Function],
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <form>
                      <div>
                        <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>
                      </div>
                      <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>
                      <button
                        type="submit"
                      >
                        Log in
                      </button>
                    </form>,
                    "tag": 5,
                    "type": "form",
                    "updateQueue": null,
                  },
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": LoginForm {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "handleChange": [Function],
                    "handleSubmit": [Function],
                    "props": Object {
                      "loading": false,
                      "logIn": [Function],
                    },
                    "refs": Object {},
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "type": [Function],
                  "updateQueue": null,
                },
                "effectTag": 5,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {},
                "memoizedState": Object {},
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {},
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": Connect {
                  "__reactInternalMemoizedMaskedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "__reactInternalMemoizedMergedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": Subscription {
                      "listeners": Object {
                        "clear": [Function],
                        "get": [Function],
                        "notify": [Function],
                        "subscribe": [Function],
                      },
                      "onStateChange": [Function],
                      "parentSub": null,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                      "unsubscribe": [Function],
                    },
                  },
                  "__reactInternalMemoizedUnmaskedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "notifyNestedSubs": [Function],
                  "props": Object {},
                  "propsMode": false,
                  "refs": Object {},
                  "renderCount": 0,
                  "selector": Object {
                    "error": null,
                    "props": Object {
                      "loading": false,
                      "logIn": [Function],
                    },
                    "run": [Function],
                    "shouldComponentUpdate": false,
                  },
                  "setWrappedInstance": [Function],
                  "state": Object {},
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "subscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                  "version": 0,
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      }
                    }
                  />,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Email,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Password",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Password",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 17,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="password"
                            name="password"
                            type="password"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Password,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <button
                        type="submit"
                      >
                        Log in
                      </button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": LoginForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {},
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 0,
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Email,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Password",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Password",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 17,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="password"
                            name="password"
                            type="password"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Password,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <button
                        type="submit"
                      >
                        Log in
                      </button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": LoginForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {},
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 0,
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "index": 0,
          "key": null,
          "lastEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Email,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Password",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Password",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 17,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="password"
                            name="password"
                            type="password"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Password,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <button
                        type="submit"
                      >
                        Log in
                      </button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": LoginForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": [Circular],
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "storeSubscription": null,
              },
              "notifyNestedSubs": [Function],
              "props": Object {},
              "propsMode": false,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 0,
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "memoizedProps": Object {
            "children": <Connect(LoginForm) />,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <Connect(LoginForm) />,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 7,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 8,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 9,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 12,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 13,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Email",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Email",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 14,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="email"
                            name="email"
                            type="email"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Email,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 10,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 15,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 16,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Password",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Password",
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 17,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <input
                              id="password"
                              name="password"
                              type="password"
                            />,
                            "tag": 5,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": Password,
                          "tag": 6,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>,
                        "tag": 5,
                        "type": "label",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 11,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <button
                          type="submit"
                        >
                          Log in
                        </button>,
                        "tag": 5,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>,
                  "tag": 5,
                  "type": "form",
                  "updateQueue": null,
                },
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": LoginForm {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handleChange": [Function],
                  "handleSubmit": [Function],
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "notifyNestedSubs": [Function],
                "props": Object {},
                "propsMode": false,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 0,
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 7,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 8,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 9,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 12,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 13,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Email",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Email",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 14,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "email",
                            "name": "email",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "email",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="email"
                            name="email"
                            type="email"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Email,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Email",
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />,
                        ],
                        "htmlFor": "email",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 10,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 15,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 16,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Password",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Password",
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 17,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "id": "password",
                              "name": "password",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "password",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <input
                              id="password"
                              name="password"
                              type="password"
                            />,
                            "tag": 5,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": Password,
                          "tag": 6,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Password",
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />,
                          ],
                          "htmlFor": "password",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>,
                        "tag": 5,
                        "type": "label",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 11,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Log in",
                          "disabled": false,
                          "type": "submit",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <button
                          type="submit"
                        >
                          Log in
                        </button>,
                        "tag": 5,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div>
                        <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>
                      </div>,
                      <div>
                        <label
                          htmlFor="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />
                        </label>
                      </div>,
                      <button
                        disabled={false}
                        type="submit"
                      >
                        Log in
                      </button>,
                    ],
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>,
                  "tag": 5,
                  "type": "form",
                  "updateQueue": null,
                },
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": LoginForm {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handleChange": [Function],
                  "handleSubmit": [Function],
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "refs": Object {},
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {},
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {},
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "notifyNestedSubs": [Function],
                "props": Object {},
                "propsMode": false,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": null,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 0,
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <form>
                      <div>
                        <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>
                      </div>
                      <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>
                      <button
                        type="submit"
                      >
                        Log in
                      </button>
                    </form>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "callbackList": null,
                  "capturedValues": null,
                  "expirationTime": 1,
                  "first": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                  },
                  "hasForceUpdate": false,
                  "isInitialized": false,
                  "isProcessing": false,
                  "last": Object {
                    "callback": null,
                    "capturedValue": null,
                    "expirationTime": 1,
                    "isForced": false,
                    "isReplace": false,
                    "next": null,
                    "partialState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": FiberNode {
                "_debugID": 6,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 7,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 8,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 9,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 12,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 13,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "Email",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "Email",
                          "ref": null,
                          "return": [Circular],
                          "sibling": FiberNode {
                            "_debugID": 14,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "id": "email",
                              "name": "email",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "email",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "id": "email",
                              "name": "email",
                              "onChange": [Function],
                              "readOnly": false,
                              "type": "email",
                            },
                            "ref": null,
                            "return": [Circular],
                            "sibling": null,
                            "stateNode": <input
                              id="email"
                              name="email"
                              type="email"
                            />,
                            "tag": 5,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "stateNode": Email,
                          "tag": 6,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            "Email",
                            <input
                              id="email"
                              name="email"
                              onChange={[Function]}
                              readOnly={false}
                              type="email"
                            />,
                          ],
                          "htmlFor": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            "Email",
                            <input
                              id="email"
                              name="email"
                              onChange={[Function]}
                              readOnly={false}
                              type="email"
                            />,
                          ],
                          "htmlFor": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>,
                        "tag": 5,
                        "type": "label",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <label
                          htmlFor="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            onChange={[Function]}
                            readOnly={false}
                            type="email"
                          />
                        </label>,
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 10,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 15,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 16,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "Password",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "Password",
                            "ref": null,
                            "return": [Circular],
                            "sibling": FiberNode {
                              "_debugID": 17,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": null,
                              "alternate": null,
                              "child": null,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "id": "password",
                                "name": "password",
                                "onChange": [Function],
                                "readOnly": false,
                                "type": "password",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "id": "password",
                                "name": "password",
                                "onChange": [Function],
                                "readOnly": false,
                                "type": "password",
                              },
                              "ref": null,
                              "return": [Circular],
                              "sibling": null,
                              "stateNode": <input
                                id="password"
                                name="password"
                                type="password"
                              />,
                              "tag": 5,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "stateNode": Password,
                            "tag": 6,
                            "type": null,
                            "updateQueue": null,
                          },
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              "Password",
                              <input
                                id="password"
                                name="password"
                                onChange={[Function]}
                                readOnly={false}
                                type="password"
                              />,
                            ],
                            "htmlFor": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              "Password",
                              <input
                                id="password"
                                name="password"
                                onChange={[Function]}
                                readOnly={false}
                                type="password"
                              />,
                            ],
                            "htmlFor": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <label
                            for="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              type="password"
                            />
                          </label>,
                          "tag": 5,
                          "type": "label",
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": <label
                            htmlFor="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />
                          </label>,
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": <label
                            htmlFor="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />
                          </label>,
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 11,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Log in",
                            "disabled": false,
                            "type": "submit",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Log in",
                            "disabled": false,
                            "type": "submit",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <button
                            type="submit"
                          >
                            Log in
                          </button>,
                          "tag": 5,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "stateNode": <div>
                          <label
                            for="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              type="password"
                            />
                          </label>
                        </div>,
                        "tag": 5,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div>
                        <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>
                      </div>,
                      "tag": 5,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div>
                          <label
                            htmlFor="email"
                          >
                            Email
                            <input
                              id="email"
                              name="email"
                              onChange={[Function]}
                              readOnly={false}
                              type="email"
                            />
                          </label>
                        </div>,
                        <div>
                          <label
                            htmlFor="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />
                          </label>
                        </div>,
                        <button
                          disabled={false}
                          type="submit"
                        >
                          Log in
                        </button>,
                      ],
                      "onSubmit": [Function],
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div>
                          <label
                            htmlFor="email"
                          >
                            Email
                            <input
                              id="email"
                              name="email"
                              onChange={[Function]}
                              readOnly={false}
                              type="email"
                            />
                          </label>
                        </div>,
                        <div>
                          <label
                            htmlFor="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              onChange={[Function]}
                              readOnly={false}
                              type="password"
                            />
                          </label>
                        </div>,
                        <button
                          disabled={false}
                          type="submit"
                        >
                          Log in
                        </button>,
                      ],
                      "onSubmit": [Function],
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <form>
                      <div>
                        <label
                          for="email"
                        >
                          Email
                          <input
                            id="email"
                            name="email"
                            type="email"
                          />
                        </label>
                      </div>
                      <div>
                        <label
                          for="password"
                        >
                          Password
                          <input
                            id="password"
                            name="password"
                            type="password"
                          />
                        </label>
                      </div>
                      <button
                        type="submit"
                      >
                        Log in
                      </button>
                    </form>,
                    "tag": 5,
                    "type": "form",
                    "updateQueue": null,
                  },
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "loading": false,
                    "logIn": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": null,
                  "stateNode": LoginForm {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "handleChange": [Function],
                    "handleSubmit": [Function],
                    "props": Object {
                      "loading": false,
                      "logIn": [Function],
                    },
                    "refs": Object {},
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "type": [Function],
                  "updateQueue": null,
                },
                "effectTag": 5,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {},
                "memoizedState": Object {},
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {},
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": Connect {
                  "__reactInternalMemoizedMaskedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "__reactInternalMemoizedMergedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": Subscription {
                      "listeners": Object {
                        "clear": [Function],
                        "get": [Function],
                        "notify": [Function],
                        "subscribe": [Function],
                      },
                      "onStateChange": [Function],
                      "parentSub": null,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                      "unsubscribe": [Function],
                    },
                  },
                  "__reactInternalMemoizedUnmaskedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "notifyNestedSubs": [Function],
                  "props": Object {},
                  "propsMode": false,
                  "refs": Object {},
                  "renderCount": 0,
                  "selector": Object {
                    "error": null,
                    "props": Object {
                      "loading": false,
                      "logIn": [Function],
                    },
                    "run": [Function],
                    "shouldComponentUpdate": false,
                  },
                  "setWrappedInstance": [Function],
                  "state": Object {},
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "subscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                  "version": 0,
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <form>
                    <div>
                      <label
                        for="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          type="email"
                        />
                      </label>
                    </div>
                    <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>
                    <button
                      type="submit"
                    >
                      Log in
                    </button>
                  </form>
                </div>,
                "context": Object {},
                "current": [Circular],
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      }
                    }
                  />,
                },
                "callbackList": null,
                "capturedValues": null,
                "expirationTime": 0,
                "first": null,
                "hasForceUpdate": false,
                "isInitialized": true,
                "isProcessing": false,
                "last": null,
              },
            },
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {
          "children": <Connect(LoginForm) />,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
        },
        "refs": Object {},
        "state": null,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Connect(LoginForm) />,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": Connect {
          "__reactInternalMemoizedMaskedChildContext": Object {
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
            "storeSubscription": null,
          },
          "__reactInternalMemoizedMergedChildContext": Object {
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
            "storeSubscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": null,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(Symbol.observable): [Function],
              },
              "unsubscribe": [Function],
            },
          },
          "__reactInternalMemoizedUnmaskedChildContext": Object {
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
            "storeSubscription": null,
          },
          "_reactInternalFiber": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Email,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Password",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Password",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 17,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="password"
                            name="password"
                            type="password"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Password,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <button
                        type="submit"
                      >
                        Log in
                      </button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "ref": null,
              "return": [Circular],
              "sibling": null,
              "stateNode": LoginForm {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleChange": [Function],
                "handleSubmit": [Function],
                "props": Object {
                  "loading": false,
                  "logIn": [Function],
                },
                "refs": Object {},
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {},
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {},
            "ref": null,
            "return": FiberNode {
              "_debugID": 5,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 4,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": [Circular],
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 1,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": FiberNode {
                    "_debugID": 1,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": [Circular],
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form>
                          <div>
                            <label
                              for="email"
                            >
                              Email
                              <input
                                id="email"
                                name="email"
                                type="email"
                              />
                            </label>
                          </div>
                          <div>
                            <label
                              for="password"
                            >
                              Password
                              <input
                                id="password"
                                name="password"
                                type="password"
                              />
                            </label>
                          </div>
                          <button
                            type="submit"
                          >
                            Log in
                          </button>
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "remainingExpirationTime": 0,
                    },
                    "tag": 3,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "callbackList": null,
                      "capturedValues": null,
                      "expirationTime": 1,
                      "first": Object {
                        "callback": null,
                        "capturedValue": null,
                        "expirationTime": 1,
                        "isForced": false,
                        "isReplace": false,
                        "next": null,
                        "partialState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(LoginForm) />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(Symbol.observable): [Function],
                                },
                              }
                            }
                          />,
                        },
                      },
                      "hasForceUpdate": false,
                      "isInitialized": false,
                      "isProcessing": false,
                      "last": Object {
                        "callback": null,
                        "capturedValue": null,
                        "expirationTime": 1,
                        "isForced": false,
                        "isReplace": false,
                        "next": null,
                        "partialState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(LoginForm) />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(Symbol.observable): [Function],
                                },
                              }
                            }
                          />,
                        },
                      },
                    },
                  },
                  "child": [Circular],
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form>
                        <div>
                          <label
                            for="email"
                          >
                            Email
                            <input
                              id="email"
                              name="email"
                              type="email"
                            />
                          </label>
                        </div>
                        <div>
                          <label
                            for="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              type="password"
                            />
                          </label>
                        </div>
                        <button
                          type="submit"
                        >
                          Log in
                        </button>
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "remainingExpirationTime": 0,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                    "callbackList": null,
                    "capturedValues": null,
                    "expirationTime": 0,
                    "first": null,
                    "hasForceUpdate": false,
                    "isInitialized": true,
                    "isProcessing": false,
                    "last": null,
                  },
                },
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <Connect(LoginForm) />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 4,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": [Circular],
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 1,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": FiberNode {
                    "_debugID": 1,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": [Circular],
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <form>
                          <div>
                            <label
                              for="email"
                            >
                              Email
                              <input
                                id="email"
                                name="email"
                                type="email"
                              />
                            </label>
                          </div>
                          <div>
                            <label
                              for="password"
                            >
                              Password
                              <input
                                id="password"
                                name="password"
                                type="password"
                              />
                            </label>
                          </div>
                          <button
                            type="submit"
                          >
                            Log in
                          </button>
                        </form>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "remainingExpirationTime": 0,
                    },
                    "tag": 3,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "callbackList": null,
                      "capturedValues": null,
                      "expirationTime": 1,
                      "first": Object {
                        "callback": null,
                        "capturedValue": null,
                        "expirationTime": 1,
                        "isForced": false,
                        "isReplace": false,
                        "next": null,
                        "partialState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(LoginForm) />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(Symbol.observable): [Function],
                                },
                              }
                            }
                          />,
                        },
                      },
                      "hasForceUpdate": false,
                      "isInitialized": false,
                      "isProcessing": false,
                      "last": Object {
                        "callback": null,
                        "capturedValue": null,
                        "expirationTime": 1,
                        "isForced": false,
                        "isReplace": false,
                        "next": null,
                        "partialState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(LoginForm) />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(Symbol.observable): [Function],
                                },
                              }
                            }
                          />,
                        },
                      },
                    },
                  },
                  "child": [Circular],
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <form>
                        <div>
                          <label
                            for="email"
                          >
                            Email
                            <input
                              id="email"
                              name="email"
                              type="email"
                            />
                          </label>
                        </div>
                        <div>
                          <label
                            for="password"
                          >
                            Password
                            <input
                              id="password"
                              name="password"
                              type="password"
                            />
                          </label>
                        </div>
                        <button
                          type="submit"
                        >
                          Log in
                        </button>
                      </form>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "remainingExpirationTime": 0,
                  },
                  "tag": 3,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(LoginForm) />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(Symbol.observable): [Function],
                            },
                          }
                        }
                      />,
                    },
                    "callbackList": null,
                    "capturedValues": null,
                    "expirationTime": 0,
                    "first": null,
                    "hasForceUpdate": false,
                    "isInitialized": true,
                    "isProcessing": false,
                    "last": null,
                  },
                },
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "sibling": null,
              "stateNode": Provider {
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(LoginForm) />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                },
                "refs": Object {},
                "state": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(Symbol.observable): [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "sibling": null,
            "stateNode": [Circular],
            "tag": 2,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "context": Object {
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
            "storeSubscription": null,
          },
          "notifyNestedSubs": [Function],
          "props": Object {},
          "propsMode": false,
          "refs": Object {},
          "renderCount": 0,
          "selector": Object {
            "error": null,
            "props": Object {
              "loading": false,
              "logIn": [Function],
            },
            "run": [Function],
            "shouldComponentUpdate": false,
          },
          "setWrappedInstance": [Function],
          "state": Object {},
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          },
          "subscription": Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": null,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(Symbol.observable): [Function],
            },
            "unsubscribe": [Function],
          },
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
          "version": 0,
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": Object {
          "instance": LoginForm {
            "_reactInternalFiber": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 6,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": [Circular],
                "effectTag": 5,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {},
                "memoizedState": Object {},
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {},
                "ref": null,
                "return": FiberNode {
                  "_debugID": 5,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 4,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": null,
                    "child": [Circular],
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 1,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": FiberNode {
                        "_debugID": 1,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": [Circular],
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <form>
                              <div>
                                <label
                                  for="email"
                                >
                                  Email
                                  <input
                                    id="email"
                                    name="email"
                                    type="email"
                                  />
                                </label>
                              </div>
                              <div>
                                <label
                                  for="password"
                                >
                                  Password
                                  <input
                                    id="password"
                                    name="password"
                                    type="password"
                                  />
                                </label>
                              </div>
                              <button
                                type="submit"
                              >
                                Log in
                              </button>
                            </form>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "remainingExpirationTime": 0,
                        },
                        "tag": 3,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "callbackList": null,
                          "capturedValues": null,
                          "expirationTime": 1,
                          "first": Object {
                            "callback": null,
                            "capturedValue": null,
                            "expirationTime": 1,
                            "isForced": false,
                            "isReplace": false,
                            "next": null,
                            "partialState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(LoginForm) />,
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(Symbol.observable): [Function],
                                    },
                                  }
                                }
                              />,
                            },
                          },
                          "hasForceUpdate": false,
                          "isInitialized": false,
                          "isProcessing": false,
                          "last": Object {
                            "callback": null,
                            "capturedValue": null,
                            "expirationTime": 1,
                            "isForced": false,
                            "isReplace": false,
                            "next": null,
                            "partialState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(LoginForm) />,
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(Symbol.observable): [Function],
                                    },
                                  }
                                }
                              />,
                            },
                          },
                        },
                      },
                      "child": [Circular],
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form>
                            <div>
                              <label
                                for="email"
                              >
                                Email
                                <input
                                  id="email"
                                  name="email"
                                  type="email"
                                />
                              </label>
                            </div>
                            <div>
                              <label
                                for="password"
                              >
                                Password
                                <input
                                  id="password"
                                  name="password"
                                  type="password"
                                />
                              </label>
                            </div>
                            <button
                              type="submit"
                            >
                              Log in
                            </button>
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "remainingExpirationTime": 0,
                      },
                      "tag": 3,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(LoginForm) />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(Symbol.observable): [Function],
                                },
                              }
                            }
                          />,
                        },
                        "callbackList": null,
                        "capturedValues": null,
                        "expirationTime": 0,
                        "first": null,
                        "hasForceUpdate": false,
                        "isInitialized": true,
                        "isProcessing": false,
                        "last": null,
                      },
                    },
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "alternate": null,
                  "child": [Circular],
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 4,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": null,
                    "child": [Circular],
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 1,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": FiberNode {
                        "_debugID": 1,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": [Circular],
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <form>
                              <div>
                                <label
                                  for="email"
                                >
                                  Email
                                  <input
                                    id="email"
                                    name="email"
                                    type="email"
                                  />
                                </label>
                              </div>
                              <div>
                                <label
                                  for="password"
                                >
                                  Password
                                  <input
                                    id="password"
                                    name="password"
                                    type="password"
                                  />
                                </label>
                              </div>
                              <button
                                type="submit"
                              >
                                Log in
                              </button>
                            </form>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "remainingExpirationTime": 0,
                        },
                        "tag": 3,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "callbackList": null,
                          "capturedValues": null,
                          "expirationTime": 1,
                          "first": Object {
                            "callback": null,
                            "capturedValue": null,
                            "expirationTime": 1,
                            "isForced": false,
                            "isReplace": false,
                            "next": null,
                            "partialState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(LoginForm) />,
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(Symbol.observable): [Function],
                                    },
                                  }
                                }
                              />,
                            },
                          },
                          "hasForceUpdate": false,
                          "isInitialized": false,
                          "isProcessing": false,
                          "last": Object {
                            "callback": null,
                            "capturedValue": null,
                            "expirationTime": 1,
                            "isForced": false,
                            "isReplace": false,
                            "next": null,
                            "partialState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(LoginForm) />,
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(Symbol.observable): [Function],
                                    },
                                  }
                                }
                              />,
                            },
                          },
                        },
                      },
                      "child": [Circular],
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form>
                            <div>
                              <label
                                for="email"
                              >
                                Email
                                <input
                                  id="email"
                                  name="email"
                                  type="email"
                                />
                              </label>
                            </div>
                            <div>
                              <label
                                for="password"
                              >
                                Password
                                <input
                                  id="password"
                                  name="password"
                                  type="password"
                                />
                              </label>
                            </div>
                            <button
                              type="submit"
                            >
                              Log in
                            </button>
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "remainingExpirationTime": 0,
                      },
                      "tag": 3,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(LoginForm) />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(Symbol.observable): [Function],
                                },
                              }
                            }
                          />,
                        },
                        "callbackList": null,
                        "capturedValues": null,
                        "expirationTime": 0,
                        "first": null,
                        "hasForceUpdate": false,
                        "isInitialized": true,
                        "isProcessing": false,
                        "last": null,
                      },
                    },
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "sibling": null,
                  "stateNode": Provider {
                    "__reactInternalMemoizedMergedChildContext": Object {
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                      "storeSubscription": null,
                    },
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                    "refs": Object {},
                    "state": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "type": [Function],
                  "updateQueue": null,
                },
                "sibling": null,
                "stateNode": Connect {
                  "__reactInternalMemoizedMaskedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "__reactInternalMemoizedMergedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": Subscription {
                      "listeners": Object {
                        "clear": [Function],
                        "get": [Function],
                        "notify": [Function],
                        "subscribe": [Function],
                      },
                      "onStateChange": [Function],
                      "parentSub": null,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                      "unsubscribe": [Function],
                    },
                  },
                  "__reactInternalMemoizedUnmaskedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "notifyNestedSubs": [Function],
                  "props": Object {},
                  "propsMode": false,
                  "refs": Object {},
                  "renderCount": 0,
                  "selector": Object {
                    "error": null,
                    "props": Object {
                      "loading": false,
                      "logIn": [Function],
                    },
                    "run": [Function],
                    "shouldComponentUpdate": false,
                  },
                  "setWrappedInstance": [Function],
                  "state": Object {},
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "subscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                  "version": 0,
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 8,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 9,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 12,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 13,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Email",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Email",
                      "ref": null,
                      "return": [Circular],
                      "sibling": FiberNode {
                        "_debugID": 14,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "return": [Circular],
                        "sibling": null,
                        "stateNode": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "tag": 5,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Email,
                      "tag": 6,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": null,
                    "stateNode": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "tag": 5,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <label
                      htmlFor="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        onChange={[Function]}
                        readOnly={false}
                        type="email"
                      />
                    </label>,
                  },
                  "ref": null,
                  "return": [Circular],
                  "sibling": FiberNode {
                    "_debugID": 10,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 15,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 16,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "Password",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "Password",
                        "ref": null,
                        "return": [Circular],
                        "sibling": FiberNode {
                          "_debugID": 17,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "id": "password",
                            "name": "password",
                            "onChange": [Function],
                            "readOnly": false,
                            "type": "password",
                          },
                          "ref": null,
                          "return": [Circular],
                          "sibling": null,
                          "stateNode": <input
                            id="password"
                            name="password"
                            type="password"
                          />,
                          "tag": 5,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "stateNode": Password,
                        "tag": 6,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          "Password",
                          <input
                            id="password"
                            name="password"
                            onChange={[Function]}
                            readOnly={false}
                            type="password"
                          />,
                        ],
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>,
                      "tag": 5,
                      "type": "label",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>,
                    },
                    "ref": null,
                    "return": [Circular],
                    "sibling": FiberNode {
                      "_debugID": 11,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Log in",
                        "disabled": false,
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "sibling": null,
                      "stateNode": <button
                        type="submit"
                      >
                        Log in
                      </button>,
                      "tag": 5,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div>
                      <label
                        for="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          type="password"
                        />
                      </label>
                    </div>,
                    "tag": 5,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>,
                  "tag": 5,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <label
                        htmlFor="email"
                      >
                        Email
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />
                      </label>
                    </div>,
                    <div>
                      <label
                        htmlFor="password"
                      >
                        Password
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />
                      </label>
                    </div>,
                    <button
                      disabled={false}
                      type="submit"
                    >
                      Log in
                    </button>,
                  ],
                  "onSubmit": [Function],
                },
                "ref": null,
                "return": [Circular],
                "sibling": null,
                "stateNode": <form>
                  <div>
                    <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>
                  </div>
                  <div>
                    <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>
                  </div>
                  <button
                    type="submit"
                  >
                    Log in
                  </button>
                </form>,
                "tag": 5,
                "type": "form",
                "updateQueue": null,
              },
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "loading": false,
                "logIn": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 6,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": [Circular],
                "effectTag": 5,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {},
                "memoizedState": Object {},
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {},
                "ref": null,
                "return": FiberNode {
                  "_debugID": 5,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 4,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": null,
                    "child": [Circular],
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 1,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": FiberNode {
                        "_debugID": 1,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": [Circular],
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <form>
                              <div>
                                <label
                                  for="email"
                                >
                                  Email
                                  <input
                                    id="email"
                                    name="email"
                                    type="email"
                                  />
                                </label>
                              </div>
                              <div>
                                <label
                                  for="password"
                                >
                                  Password
                                  <input
                                    id="password"
                                    name="password"
                                    type="password"
                                  />
                                </label>
                              </div>
                              <button
                                type="submit"
                              >
                                Log in
                              </button>
                            </form>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "remainingExpirationTime": 0,
                        },
                        "tag": 3,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "callbackList": null,
                          "capturedValues": null,
                          "expirationTime": 1,
                          "first": Object {
                            "callback": null,
                            "capturedValue": null,
                            "expirationTime": 1,
                            "isForced": false,
                            "isReplace": false,
                            "next": null,
                            "partialState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(LoginForm) />,
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(Symbol.observable): [Function],
                                    },
                                  }
                                }
                              />,
                            },
                          },
                          "hasForceUpdate": false,
                          "isInitialized": false,
                          "isProcessing": false,
                          "last": Object {
                            "callback": null,
                            "capturedValue": null,
                            "expirationTime": 1,
                            "isForced": false,
                            "isReplace": false,
                            "next": null,
                            "partialState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(LoginForm) />,
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(Symbol.observable): [Function],
                                    },
                                  }
                                }
                              />,
                            },
                          },
                        },
                      },
                      "child": [Circular],
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form>
                            <div>
                              <label
                                for="email"
                              >
                                Email
                                <input
                                  id="email"
                                  name="email"
                                  type="email"
                                />
                              </label>
                            </div>
                            <div>
                              <label
                                for="password"
                              >
                                Password
                                <input
                                  id="password"
                                  name="password"
                                  type="password"
                                />
                              </label>
                            </div>
                            <button
                              type="submit"
                            >
                              Log in
                            </button>
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "remainingExpirationTime": 0,
                      },
                      "tag": 3,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(LoginForm) />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(Symbol.observable): [Function],
                                },
                              }
                            }
                          />,
                        },
                        "callbackList": null,
                        "capturedValues": null,
                        "expirationTime": 0,
                        "first": null,
                        "hasForceUpdate": false,
                        "isInitialized": true,
                        "isProcessing": false,
                        "last": null,
                      },
                    },
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "alternate": null,
                  "child": [Circular],
                  "effectTag": 1,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(LoginForm) />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 4,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": null,
                    "child": [Circular],
                    "effectTag": 1,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "memoizedState": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(LoginForm) />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(Symbol.observable): [Function],
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 1,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": FiberNode {
                        "_debugID": 1,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": [Circular],
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 1,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": null,
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <form>
                              <div>
                                <label
                                  for="email"
                                >
                                  Email
                                  <input
                                    id="email"
                                    name="email"
                                    type="email"
                                  />
                                </label>
                              </div>
                              <div>
                                <label
                                  for="password"
                                >
                                  Password
                                  <input
                                    id="password"
                                    name="password"
                                    type="password"
                                  />
                                </label>
                              </div>
                              <button
                                type="submit"
                              >
                                Log in
                              </button>
                            </form>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "remainingExpirationTime": 0,
                        },
                        "tag": 3,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": null,
                          "callbackList": null,
                          "capturedValues": null,
                          "expirationTime": 1,
                          "first": Object {
                            "callback": null,
                            "capturedValue": null,
                            "expirationTime": 1,
                            "isForced": false,
                            "isReplace": false,
                            "next": null,
                            "partialState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(LoginForm) />,
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(Symbol.observable): [Function],
                                    },
                                  }
                                }
                              />,
                            },
                          },
                          "hasForceUpdate": false,
                          "isInitialized": false,
                          "isProcessing": false,
                          "last": Object {
                            "callback": null,
                            "capturedValue": null,
                            "expirationTime": 1,
                            "isForced": false,
                            "isReplace": false,
                            "next": null,
                            "partialState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(LoginForm) />,
                                    "store": Object {
                                      "dispatch": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                      Symbol(Symbol.observable): [Function],
                                    },
                                  }
                                }
                              />,
                            },
                          },
                        },
                      },
                      "child": [Circular],
                      "effectTag": 32,
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": null,
                      "memoizedState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(LoginForm) />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                                Symbol(Symbol.observable): [Function],
                              },
                            }
                          }
                        />,
                      },
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <form>
                            <div>
                              <label
                                for="email"
                              >
                                Email
                                <input
                                  id="email"
                                  name="email"
                                  type="email"
                                />
                              </label>
                            </div>
                            <div>
                              <label
                                for="password"
                              >
                                Password
                                <input
                                  id="password"
                                  name="password"
                                  type="password"
                                />
                              </label>
                            </div>
                            <button
                              type="submit"
                            >
                              Log in
                            </button>
                          </form>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "remainingExpirationTime": 0,
                      },
                      "tag": 3,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(LoginForm) />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                  Symbol(Symbol.observable): [Function],
                                },
                              }
                            }
                          />,
                        },
                        "callbackList": null,
                        "capturedValues": null,
                        "expirationTime": 0,
                        "first": null,
                        "hasForceUpdate": false,
                        "isInitialized": true,
                        "isProcessing": false,
                        "last": null,
                      },
                    },
                    "sibling": null,
                    "stateNode": WrapperComponent {
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(LoginForm) />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(Symbol.observable): [Function],
                          },
                        },
                      },
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 2,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "sibling": null,
                  "stateNode": Provider {
                    "__reactInternalMemoizedMergedChildContext": Object {
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                      "storeSubscription": null,
                    },
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "children": <Connect(LoginForm) />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                    },
                    "refs": Object {},
                    "state": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 2,
                  "type": [Function],
                  "updateQueue": null,
                },
                "sibling": null,
                "stateNode": Connect {
                  "__reactInternalMemoizedMaskedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "__reactInternalMemoizedMergedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": Subscription {
                      "listeners": Object {
                        "clear": [Function],
                        "get": [Function],
                        "notify": [Function],
                        "subscribe": [Function],
                      },
                      "onStateChange": [Function],
                      "parentSub": null,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(Symbol.observable): [Function],
                      },
                      "unsubscribe": [Function],
                    },
                  },
                  "__reactInternalMemoizedUnmaskedChildContext": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "storeSubscription": null,
                  },
                  "notifyNestedSubs": [Function],
                  "props": Object {},
                  "propsMode": false,
                  "refs": Object {},
                  "renderCount": 0,
                  "selector": Object {
                    "error": null,
                    "props": Object {
                      "loading": false,
                      "logIn": [Function],
                    },
                    "run": [Function],
                    "shouldComponentUpdate": false,
                  },
                  "setWrappedInstance": [Function],
                  "state": Object {},
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(Symbol.observable): [Function],
                  },
                  "subscription": Subscription {
                    "listeners": Object {
                      "clear": [Function],
                      "get": [Function],
                      "notify": [Function],
                      "subscribe": [Function],
                    },
                    "onStateChange": [Function],
                    "parentSub": null,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(Symbol.observable): [Function],
                    },
                    "unsubscribe": [Function],
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                  "version": 0,
                },
                "tag": 2,
                "type": [Function],
                "updateQueue": null,
              },
              "sibling": null,
              "stateNode": [Circular],
              "tag": 2,
              "type": [Function],
              "updateQueue": null,
            },
            "_reactInternalInstance": Object {},
            "context": Object {},
            "handleChange": [Function],
            "handleSubmit": [Function],
            "props": Object {
              "loading": false,
              "logIn": [Function],
            },
            "refs": Object {},
            "state": null,
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "loading": false,
            "logIn": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": <form>
              <div>
                <label
                  for="email"
                >
                  Email
                  <input
                    id="email"
                    name="email"
                    type="email"
                  />
                </label>
              </div>
              <div>
                <label
                  for="password"
                >
                  Password
                  <input
                    id="password"
                    name="password"
                    type="password"
                  />
                </label>
              </div>
              <button
                type="submit"
              >
                Log in
              </button>
            </form>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div>
                  <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>
                </div>,
                <div>
                  <label
                    htmlFor="password"
                  >
                    Password
                    <input
                      id="password"
                      name="password"
                      onChange={[Function]}
                      readOnly={false}
                      type="password"
                    />
                  </label>
                </div>,
                <button
                  disabled={false}
                  type="submit"
                >
                  Log in
                </button>,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div>
                  <label
                    for="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      type="email"
                    />
                  </label>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <label
                    htmlFor="email"
                  >
                    Email
                    <input
                      id="email"
                      name="email"
                      onChange={[Function]}
                      readOnly={false}
                      type="email"
                    />
                  </label>,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <label
                      for="email"
                    >
                      Email
                      <input
                        id="email"
                        name="email"
                        type="email"
                      />
                    </label>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Email",
                        <input
                          id="email"
                          name="email"
                          onChange={[Function]}
                          readOnly={false}
                          type="email"
                        />,
                      ],
                      "htmlFor": "email",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Email",
                      Object {
                        "instance": <input
                          id="email"
                          name="email"
                          type="email"
                        />,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "email",
                        },
                        "ref": null,
                        "rendered": Array [
                          undefined,
                        ],
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <div>
                  <label
                    for="password"
                  >
                    Password
                    <input
                      id="password"
                      name="password"
                      type="password"
                    />
                  </label>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <label
                    htmlFor="password"
                  >
                    Password
                    <input
                      id="password"
                      name="password"
                      onChange={[Function]}
                      readOnly={false}
                      type="password"
                    />
                  </label>,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <label
                      for="password"
                    >
                      Password
                      <input
                        id="password"
                        name="password"
                        type="password"
                      />
                    </label>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Password",
                        <input
                          id="password"
                          name="password"
                          onChange={[Function]}
                          readOnly={false}
                          type="password"
                        />,
                      ],
                      "htmlFor": "password",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Password",
                      Object {
                        "instance": <input
                          id="password"
                          name="password"
                          type="password"
                        />,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "readOnly": false,
                          "type": "password",
                        },
                        "ref": null,
                        "rendered": Array [
                          undefined,
                        ],
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <button
                  type="submit"
                >
                  Log in
                </button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Log in",
                  "disabled": false,
                  "type": "submit",
                },
                "ref": null,
                "rendered": Array [
                  "Log in",
                ],
                "type": "button",
              },
            ],
            "type": "form",
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
